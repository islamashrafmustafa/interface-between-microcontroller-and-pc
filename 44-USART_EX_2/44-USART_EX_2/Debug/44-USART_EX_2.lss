
44-USART_EX_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000004ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a6  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ee  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000999  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5c  00000000  00000000  0000317a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  74:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_vsetPINDir>:
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
  7c:	82 34       	cpi	r24, 0x42	; 66
  7e:	19 f1       	breq	.+70     	; 0xc6 <DIO_vsetPINDir+0x4a>
  80:	18 f4       	brcc	.+6      	; 0x88 <DIO_vsetPINDir+0xc>
  82:	81 34       	cpi	r24, 0x41	; 65
  84:	39 f0       	breq	.+14     	; 0x94 <DIO_vsetPINDir+0x18>
  86:	08 95       	ret
  88:	83 34       	cpi	r24, 0x43	; 67
  8a:	b1 f1       	breq	.+108    	; 0xf8 <DIO_vsetPINDir+0x7c>
  8c:	84 34       	cpi	r24, 0x44	; 68
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_vsetPINDir+0x16>
  90:	4c c0       	rjmp	.+152    	; 0x12a <DIO_vsetPINDir+0xae>
  92:	08 95       	ret
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <DIO_vsetPINDir+0x32>
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_vsetPINDir+0x28>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_vsetPINDir+0x24>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x3e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x3a>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
  c6:	41 30       	cpi	r20, 0x01	; 1
  c8:	59 f4       	brne	.+22     	; 0xe0 <DIO_vsetPINDir+0x64>
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_vsetPINDir+0x5a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_vsetPINDir+0x56>
  da:	82 2b       	or	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
  de:	08 95       	ret
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x70>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x6c>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	59 f4       	brne	.+22     	; 0x112 <DIO_vsetPINDir+0x96>
  fc:	24 b3       	in	r18, 0x14	; 20
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_vsetPINDir+0x8c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_vsetPINDir+0x88>
 10c:	82 2b       	or	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0xa2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x9e>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	84 bb       	out	0x14, r24	; 20
 128:	08 95       	ret
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	59 f4       	brne	.+22     	; 0x144 <DIO_vsetPINDir+0xc8>
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0xba>
 13e:	82 2b       	or	r24, r18
 140:	81 bb       	out	0x11, r24	; 17
 142:	08 95       	ret
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xd4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xd0>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	81 bb       	out	0x11, r24	; 17
 15a:	08 95       	ret

0000015c <DIO_write>:
 15c:	82 34       	cpi	r24, 0x42	; 66
 15e:	19 f1       	breq	.+70     	; 0x1a6 <DIO_write+0x4a>
 160:	18 f4       	brcc	.+6      	; 0x168 <DIO_write+0xc>
 162:	81 34       	cpi	r24, 0x41	; 65
 164:	39 f0       	breq	.+14     	; 0x174 <DIO_write+0x18>
 166:	08 95       	ret
 168:	83 34       	cpi	r24, 0x43	; 67
 16a:	b1 f1       	breq	.+108    	; 0x1d8 <DIO_write+0x7c>
 16c:	84 34       	cpi	r24, 0x44	; 68
 16e:	09 f4       	brne	.+2      	; 0x172 <DIO_write+0x16>
 170:	4c c0       	rjmp	.+152    	; 0x20a <DIO_write+0xae>
 172:	08 95       	ret
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	59 f4       	brne	.+22     	; 0x18e <DIO_write+0x32>
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_write+0x28>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_write+0x24>
 188:	82 2b       	or	r24, r18
 18a:	8b bb       	out	0x1b, r24	; 27
 18c:	08 95       	ret
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x3e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x3a>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	08 95       	ret
 1a6:	41 30       	cpi	r20, 0x01	; 1
 1a8:	59 f4       	brne	.+22     	; 0x1c0 <DIO_write+0x64>
 1aa:	28 b3       	in	r18, 0x18	; 24
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_write+0x5a>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_write+0x56>
 1ba:	82 2b       	or	r24, r18
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	08 95       	ret
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x70>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x6c>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	08 95       	ret
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	59 f4       	brne	.+22     	; 0x1f2 <DIO_write+0x96>
 1dc:	25 b3       	in	r18, 0x15	; 21
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_write+0x8c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_write+0x88>
 1ec:	82 2b       	or	r24, r18
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	08 95       	ret
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0xa2>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x9e>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_write+0xc8>
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0xbe>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0xba>
 21e:	82 2b       	or	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xd4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xd0>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	82 bb       	out	0x12, r24	; 18
 23a:	08 95       	ret

0000023c <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 23c:	82 34       	cpi	r24, 0x42	; 66
 23e:	59 f0       	breq	.+22     	; 0x256 <DIO_write_port+0x1a>
 240:	18 f4       	brcc	.+6      	; 0x248 <DIO_write_port+0xc>
 242:	81 34       	cpi	r24, 0x41	; 65
 244:	31 f0       	breq	.+12     	; 0x252 <DIO_write_port+0x16>
 246:	08 95       	ret
 248:	83 34       	cpi	r24, 0x43	; 67
 24a:	39 f0       	breq	.+14     	; 0x25a <DIO_write_port+0x1e>
 24c:	84 34       	cpi	r24, 0x44	; 68
 24e:	39 f0       	breq	.+14     	; 0x25e <DIO_write_port+0x22>
 250:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 252:	6b bb       	out	0x1b, r22	; 27
		break ;
 254:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 256:	68 bb       	out	0x18, r22	; 24
		break ;
 258:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 25a:	65 bb       	out	0x15, r22	; 21
		break ;
 25c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 25e:	62 bb       	out	0x12, r22	; 18
 260:	08 95       	ret

00000262 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	82 e4       	ldi	r24, 0x42	; 66
 268:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <send_falling_edge+0xe>
 274:	00 c0       	rjmp	.+0      	; 0x276 <send_falling_edge+0x14>
 276:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_write>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <send_falling_edge+0x24>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <send_falling_edge+0x2a>
 28c:	00 00       	nop
 28e:	08 95       	ret

00000290 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 290:	68 2f       	mov	r22, r24
 292:	81 e4       	ldi	r24, 0x41	; 65
 294:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_write_port>
	DIO_write('B',RS,0);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	82 e4       	ldi	r24, 0x42	; 66
 29e:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_write>
	send_falling_edge();
 2a2:	0e 94 31 01 	call	0x262	; 0x262 <send_falling_edge>
 2a6:	8f ec       	ldi	r24, 0xCF	; 207
 2a8:	97 e0       	ldi	r25, 0x07	; 7
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_vSend_cmd+0x1a>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_vSend_cmd+0x20>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <LCD_vInit>:
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	81 ee       	ldi	r24, 0xE1	; 225
 2b8:	94 e0       	ldi	r25, 0x04	; 4
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <LCD_vInit+0x6>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_vInit+0x10>
 2c4:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	81 e4       	ldi	r24, 0x41	; 65
 2e0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e4       	ldi	r24, 0x41	; 65
 2ea:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	64 e0       	ldi	r22, 0x04	; 4
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	66 e0       	ldi	r22, 0x06	; 6
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	67 e0       	ldi	r22, 0x07	; 7
 310:	81 e4       	ldi	r24, 0x41	; 65
 312:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	82 e4       	ldi	r24, 0x42	; 66
 31c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	82 e4       	ldi	r24, 0x42	; 66
 33a:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 33e:	88 e3       	ldi	r24, 0x38	; 56
 340:	0e 94 48 01 	call	0x290	; 0x290 <LCD_vSend_cmd>
 344:	8f ec       	ldi	r24, 0xCF	; 207
 346:	97 e0       	ldi	r25, 0x07	; 7
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_vInit+0x94>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_vInit+0x9a>
 34e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 48 01 	call	0x290	; 0x290 <LCD_vSend_cmd>
 356:	8f ec       	ldi	r24, 0xCF	; 207
 358:	97 e0       	ldi	r25, 0x07	; 7
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_vInit+0xa6>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_vInit+0xac>
 360:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 48 01 	call	0x290	; 0x290 <LCD_vSend_cmd>
 368:	8f e1       	ldi	r24, 0x1F	; 31
 36a:	9e e4       	ldi	r25, 0x4E	; 78
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_vInit+0xb8>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_vInit+0xbe>
 372:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	0e 94 48 01 	call	0x290	; 0x290 <LCD_vSend_cmd>
 37a:	8f ec       	ldi	r24, 0xCF	; 207
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_vInit+0xca>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_vInit+0xd0>
 384:	00 00       	nop
 386:	08 95       	ret

00000388 <LCD_vSend_char>:
}

void LCD_vSend_char(char data)
{
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 388:	68 2f       	mov	r22, r24
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 1e 01 	call	0x23c	; 0x23c <DIO_write_port>
	DIO_write('B',RS,1);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	0e 94 ae 00 	call	0x15c	; 0x15c <DIO_write>
	send_falling_edge();
 39a:	0e 94 31 01 	call	0x262	; 0x262 <send_falling_edge>
 39e:	8f ec       	ldi	r24, 0xCF	; 207
 3a0:	97 e0       	ldi	r25, 0x07	; 7
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_vSend_char+0x1a>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_vSend_char+0x20>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <main>:
#include "USART.h"

char x;
int main(void)
{
	LCD_vInit();
 3ac:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_vInit>
    UART_vInit(9600);
 3b0:	60 e8       	ldi	r22, 0x80	; 128
 3b2:	75 e2       	ldi	r23, 0x25	; 37
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_vInit>
    while (1) 
    {
		x=UART_8uReceiveData();
 3bc:	0e 94 15 02 	call	0x42a	; 0x42a <UART_8uReceiveData>
 3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		LCD_vSend_char(x);
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_vSend_char>
 3ca:	f8 cf       	rjmp	.-16     	; 0x3bc <main+0x10>

000003cc <UART_vInit>:
}

void UART_vsendData(char data)
{
	while(READ_BIT(UCSRA,UDRE)==0);
	UDR=data;
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	aa 1f       	adc	r26, r26
 3de:	bb 1f       	adc	r27, r27
 3e0:	9c 01       	movw	r18, r24
 3e2:	ad 01       	movw	r20, r26
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	44 1f       	adc	r20, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	44 1f       	adc	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	72 e1       	ldi	r23, 0x12	; 18
 3f8:	8a e7       	ldi	r24, 0x7A	; 122
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 19 02 	call	0x432	; 0x432 <__udivmodsi4>
 400:	ba 01       	movw	r22, r20
 402:	a9 01       	movw	r20, r18
 404:	41 50       	subi	r20, 0x01	; 1
 406:	51 09       	sbc	r21, r1
 408:	61 09       	sbc	r22, r1
 40a:	71 09       	sbc	r23, r1
 40c:	bb 27       	eor	r27, r27
 40e:	a7 2f       	mov	r26, r23
 410:	96 2f       	mov	r25, r22
 412:	85 2f       	mov	r24, r21
 414:	80 bd       	out	0x20, r24	; 32
 416:	49 b9       	out	0x09, r20	; 9
 418:	8a b1       	in	r24, 0x0a	; 10
 41a:	80 61       	ori	r24, 0x10	; 16
 41c:	8a b9       	out	0x0a, r24	; 10
 41e:	8a b1       	in	r24, 0x0a	; 10
 420:	88 60       	ori	r24, 0x08	; 8
 422:	8a b9       	out	0x0a, r24	; 10
 424:	86 e8       	ldi	r24, 0x86	; 134
 426:	80 bd       	out	0x20, r24	; 32
 428:	08 95       	ret

0000042a <UART_8uReceiveData>:
}

char UART_8uReceiveData(void)
{
	while(READ_BIT(UCSRA,RXC)==0);
 42a:	5f 9b       	sbis	0x0b, 7	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <UART_8uReceiveData>
	return UDR;
 42e:	8c b1       	in	r24, 0x0c	; 12
}
 430:	08 95       	ret

00000432 <__udivmodsi4>:
 432:	a1 e2       	ldi	r26, 0x21	; 33
 434:	1a 2e       	mov	r1, r26
 436:	aa 1b       	sub	r26, r26
 438:	bb 1b       	sub	r27, r27
 43a:	fd 01       	movw	r30, r26
 43c:	0d c0       	rjmp	.+26     	; 0x458 <__udivmodsi4_ep>

0000043e <__udivmodsi4_loop>:
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	ee 1f       	adc	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	a2 17       	cp	r26, r18
 448:	b3 07       	cpc	r27, r19
 44a:	e4 07       	cpc	r30, r20
 44c:	f5 07       	cpc	r31, r21
 44e:	20 f0       	brcs	.+8      	; 0x458 <__udivmodsi4_ep>
 450:	a2 1b       	sub	r26, r18
 452:	b3 0b       	sbc	r27, r19
 454:	e4 0b       	sbc	r30, r20
 456:	f5 0b       	sbc	r31, r21

00000458 <__udivmodsi4_ep>:
 458:	66 1f       	adc	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	1a 94       	dec	r1
 462:	69 f7       	brne	.-38     	; 0x43e <__udivmodsi4_loop>
 464:	60 95       	com	r22
 466:	70 95       	com	r23
 468:	80 95       	com	r24
 46a:	90 95       	com	r25
 46c:	9b 01       	movw	r18, r22
 46e:	ac 01       	movw	r20, r24
 470:	bd 01       	movw	r22, r26
 472:	cf 01       	movw	r24, r30
 474:	08 95       	ret

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
